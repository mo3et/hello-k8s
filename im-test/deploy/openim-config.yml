apiVersion: v1
kind: ConfigMap
metadata:
  name: openim-config
data:
  discovery.yml: |
    enable: "kubernetes"
  log.yml: |
    # Log storage path, default is acceptable, change to a full path if modification is needed
    # storageLocation: ../../../../logs/
    storageLocation: ./logs/
    # Log rotation period (in hours), default is acceptable
    rotationTime: 24
    # Number of log files to retain, default is acceptable
    remainRotationCount: 2
    # Log level settings: 3 for production environment; 6 for more verbose logging in debugging environments
    remainLogLevel: 6
    # Whether to output to standard output, default is acceptable
    isStdout: true
    # Whether to log in JSON format, default is acceptable
    isJson: false
    # output simplify log when KeyAndValues's value len is bigger than 50 in rpc method log
    isSimplify: true
  mongodb.yml: |
    # URI for database connection, leave empty if using address and credential settings directly
    uri: ''
    # List of MongoDB server addresses
    address: [ mongo-service:37017 ]
    # Name of the database
    database: openim_v3
    # Username for database authentication
    username: openIM
    # Password for database authentication
    password: openIM123
    # Maximum number of connections in the connection pool
    maxPoolSize: 100
    # Maximum number of retry attempts for a failed database connection
    maxRetry: 10
  openim-api.yml: |
    secret: openIM123
    api:
      # Listening IP; 0.0.0.0 means both internal and external IPs are listened to, default is recommended
      listenIP: 0.0.0.0
      # Listening ports; if multiple are configured, multiple instances will be launched, must be consistent with the number of prometheus.ports
      ports: [ 10302 ]
    prometheus:
      # Whether to enable prometheus
      enable: true
      # Prometheus listening ports, must match the number of api.ports
      ports: [ 12302 ]
      # This address can be accessed via a browser
      grafanaURL: http://127.0.0.1:13000/
  openim-rpc-user.yml: |
    rpc:
      # API or other RPCs can access this RPC through this IP; if left blank, the internal network IP is obtained by default
      registerIP: ''
      # Listening IP; 0.0.0.0 means both internal and external IPs are listened to, if blank, the internal network IP is automatically obtained by default
      listenIP: 0.0.0.0
      # Listening ports; if multiple are configured, multiple instances will be launched, and must be consistent with the number of prometheus.ports
      ports: [ 10320 ]
    prometheus:
      # Whether to enable prometheus
      enable: true
      # Prometheus listening ports, must be consistent with the number of rpc.ports
      ports: [ 12320 ]
  share.yml: |
    secret: openIM123
    rpcRegisterName:
      user: user-rpc-service:10310
  kafka.yml: |
    username: ''
    password: ''
    producerAck: all
    compressType: none
    address: [ "localhost:19094" ]
    toRedisTopic: toRedis
    toMongoTopic: toMongo
    toPushTopic: toPush
    toOfflinePushTopic: toOfflinePush
    toRedisGroupID: redis
    toMongoGroupID: mongo
    toPushGroupID: push
    toOfflinePushGroupID: offlinePush
    tls:
      enableTLS: false
      caCrt:
      clientCrt:
      clientKey:
      clientKeyPwd:
      insecureSkipVerify: false
  mongo-init.sh: |
    echo "before running mongosh..."
    mongosh <<EOF
    var maxRetries = 300;
    var connected = false;
    var rootUsername = '$MONGO_INITDB_ROOT_USERNAME';
    var rootPassword = '$MONGO_INITDB_ROOT_PASSWORD';
    var dbName = '$MONGO_INITDB_DATABASE';
    var openimUsername = '$MONGO_OPENIM_USERNAME';
    var openimPassword = '$MONGO_OPENIM_PASSWORD';

    print('Starting MongoDB connection script...');
    print('Root username: ' + rootUsername);
    print('Target database: ' + dbName);
    print('OpenIM user to create: ' + openimUsername);

    while (!connected && maxRetries > 0) {
        try {
            print('Attempting to connect to MongoDB. Remaining retries: ' + maxRetries);
            db = connect('mongodb://127.0.0.1:27017/admin');
            var authResult = db.auth(rootUsername, rootPassword);
            if (authResult) {
                print('Authentication successful for root user: ' + rootUsername);
                connected = true;
            } else {
                print('Authentication failed for root user: ' + rootUsername + ' with password: ' + rootPassword);
                quit(1);
            }
        } catch (e) {
            maxRetries--;
            print('Connection failed due to error: ' + e);
            print('Retrying... Remaining attempts: ' + maxRetries);
            sleep(1000); // Sleep for 1 second
        }
    }

    if (connected) {
        print('Connected to MongoDB successfully. Proceeding to create user...');
        db = db.getSiblingDB(dbName);
        var createUserResult = db.createUser({
            user: openimUsername,
            pwd: openimPassword,
            roles: [{
                role: 'readWrite',
                db: dbName
            }]
        });

        if (createUserResult.ok == 1) {
            print('User creation successful. User: ' + openimUsername + ', Database: ' + dbName);
        } else {
            print('User creation failed for user: ' + openimUsername + ' in database: ' + dbName);
            quit(1);
        }
    } else {
        print('Failed to connect to MongoDB after 300 retries.');
        quit(1);
    }

    print('Script execution completed.');
    EOF
    echo "mongosh completed..."
  create-topic.sh: |
    #!/bin/bash
    echo "Creating topic..."
    KAFKA_SERVER=localhost:9092

    MAX_ATTEMPTS=300
    attempt_num=1

    echo "Waiting for Kafka to be ready..."

    until /opt/bitnami/kafka/bin/kafka-topics.sh --list --bootstrap-server $KAFKA_SERVER; do
      echo "Attempt $attempt_num of $MAX_ATTEMPTS: Kafka not ready yet..."
      if [ $attempt_num -eq $MAX_ATTEMPTS ]; then
        echo "Kafka not ready after $MAX_ATTEMPTS attempts, exiting"
        exit 1
      fi
      attempt_num=$((attempt_num+1))
      sleep 1
    done

    echo "Kafka is ready. Creating topics..."


    topics=("toRedis" "toMongo" "toPush" "toOfflinePush")
    partitions=8
    replicationFactor=1

    for topic in "${topics[@]}"; do
      if /opt/bitnami/kafka/bin/kafka-topics.sh --create \
        --bootstrap-server $KAFKA_SERVER \
        --replication-factor $replicationFactor \
        --partitions $partitions \
        --topic $topic
      then
        echo "Topic $topic created."
      else
        echo "Failed to create topic $topic."
      fi
    done

    echo "All topics created."

---
apiVersion: v1
kind: Secret
metadata:
  name: mongo-secret
type: Opaque
data:
  mongo_initdb_root_username: cm9vdA== # base64 for "root"
  mongo_initdb_root_password: b3BlbklNMTIz # base64 for "openIM123"
  mongo_initdb_database: b3BlbmltX3Yz # base64 for "openim_v3"
  mongo_openim_username: b3BlbklN # base64 for "openIM"
  mongo_openim_password: b3BlbklNMTIz # base64 for "openIM123"
