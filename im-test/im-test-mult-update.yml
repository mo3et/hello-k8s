# user-api-server-deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-api-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-api-server
  template:
    metadata:
      labels:
        app: user-api-server
    spec:
      containers:
        - name: user-api-server-container
          image: user-api-server:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: CONFIG_PATH
              value: "/config/openim-api.yml"
          volumeMounts:
            - name: combined-config-volume
              mountPath: "/config"
              readOnly: true
      volumes:
        - name: combined-config-volume
          configMap:
            name: openim-combined-config
            items:
              - key: openim-api.yml
                path: openim-api.yml
---

---
# user-rpc-server-deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-rpc-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-rpc-server
  template:
    metadata:
      labels:
        app: user-rpc-server
    spec:
      containers:
        - name: user-rpc-server-container
          image: user-rpc-server:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: CONFIG_PATH
              value: "/config/openim-rpc-user.yml"
          volumeMounts:
            - name: combined-config-volume
              mountPath: "/config"
              readOnly: true
      volumes:
        - name: combined-config-volume
          configMap:
            name: openim-combined-config
            items:
              - key: openim-rpc-user.yml
                path: openim-rpc-user.yml
---
# mongo-deployment.yml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
spec:
  serviceName: "mongo-service"
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongo
          image: mongo:6.0.2
          command:
            [
              "/bin/bash",
              "-c",
              "docker-entrypoint.sh mongod --wiredTigerCacheSizeGB 1 --auth & /config/mongo-init.sh; wait",
            ]
          volumeMounts:
            - name: combined-config-volume
              mountPath: "/config"
              readOnly: true
            - name: mongo-storage
              mountPath: /data/db
      volumes:
        - name: combined-config-volume
          configMap:
            name: openim-combined-config
            items:
              - key: mongo-init.sh
                path: mongo-init.sh

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: openim-combined-config
data:
  openim-api.yml: |
    secret: openIM123
    api:
      listenIP: 0.0.0.0
      ports: [10302]
    prometheus:
      enable: true
      ports: [20113]
  openim-rpc-user.yml: |
    rpc:
      registerIP: ''
      listenIP: 0.0.0.0
      ports: [10310]
    prometheus:
      enable: true
      ports: [20100]
  mongodb.yml: |
    uri: ''
    address: [mongo-service:27017]
    database: openim_v3
    username: openIM
    password: openIM123
    maxPoolSize: 100
    maxRetry: 10
  mongo-init.sh: |
    echo "before running mongosh..."
    mongosh <<EOF
    var maxRetries = 300;
    var connected = false;
    var rootUsername = '$MONGO_INITDB_ROOT_USERNAME';
    var rootPassword = '$MONGO_INITDB_ROOT_PASSWORD';
    var dbName = '$MONGO_INITDB_DATABASE';
    var openimUsername = '$MONGO_OPENIM_USERNAME';
    var openimPassword = '$MONGO_OPENIM_PASSWORD';

    print('Starting MongoDB connection script...');
    print('Root username: ' + rootUsername);
    print('Target database: ' + dbName);
    print('OpenIM user to create: ' + openimUsername);

    while (!connected && maxRetries > 0) {
        try {
            print('Attempting to connect to MongoDB. Remaining retries: ' + maxRetries);
            db = connect('mongodb://127.0.0.1:27017/admin');
            var authResult = db.auth(rootUsername, rootPassword);
            if (authResult) {
                print('Authentication successful for root user: ' + rootUsername);
                connected = true;
            } else {
                print('Authentication failed for root user: ' + rootUsername + ' with password: ' + rootPassword);
                quit(1);
            }
        } catch (e) {
            maxRetries--;
            print('Connection failed due to error: ' + e);
            print('Retrying... Remaining attempts: ' + maxRetries);
            sleep(1000); // Sleep for 1 second
        }
    }

    if (connected) {
        print('Connected to MongoDB successfully. Proceeding to create user...');
        db = db.getSiblingDB(dbName);
        var createUserResult = db.createUser({
            user: openimUsername,
            pwd: openimPassword,
            roles: [{
                role: 'readWrite',
                db: dbName
            }]
        });

        if (createUserResult.ok == 1) {
            print('User creation successful. User: ' + openimUsername + ', Database: ' + dbName);
        } else {
            print('User creation failed for user: ' + openimUsername + ' in database: ' + dbName);
            quit(1);
        }
    } else {
        print('Failed to connect to MongoDB after 300 retries.');
        quit(1);
    }

    print('Script execution completed.');
    EOF
    echo "mongosh completed..."
