apiVersion: v1
kind: ConfigMap
metadata:
  name: openim-config
data:
  discovery.yml: |
    enable: "kubernetes"
  log.yml: |
    # Log storage path, default is acceptable, change to a full path if modification is needed
    # storageLocation: ../../../../logs/
    storageLocation: ./logs/
    # Log rotation period (in hours), default is acceptable
    rotationTime: 24
    # Number of log files to retain, default is acceptable
    remainRotationCount: 2
    # Log level settings: 3 for production environment; 6 for more verbose logging in debugging environments
    remainLogLevel: 6
    # Whether to output to standard output, default is acceptable
    isStdout: true
    # Whether to log in JSON format, default is acceptable
    isJson: false
    # output simplify log when KeyAndValues's value len is bigger than 50 in rpc method log
    isSimplify: true
  mongodb.yml: |
    # URI for database connection, leave empty if using address and credential settings directly
    uri: ''
    # List of MongoDB server addresses
    address: [ mongo-service:37017 ]
    # Name of the database
    database: openim_v3
    # Username for database authentication
    username: openIM
    # Password for database authentication
    password: openIM123
    # Maximum number of connections in the connection pool
    maxPoolSize: 100
    # Maximum number of retry attempts for a failed database connection
    maxRetry: 10
  local-cache.yml: |
    user:
      topic: DELETE_CACHE_USER
      slotNum: 100
      slotSize: 2000
      successExpire: 300
      failedExpire: 5
    group:
      topic: DELETE_CACHE_GROUP
      slotNum: 100
      slotSize: 2000
      successExpire: 300
      failedExpire: 5
    friend:
      topic: DELETE_CACHE_FRIEND
      slotNum: 100
      slotSize: 2000
      successExpire: 300
      failedExpire: 5
    conversation:
      topic: DELETE_CACHE_CONVERSATION
      slotNum: 100
      slotSize: 2000
      successExpire: 300
      failedExpire: 5

  openim-api.yml: |
    secret: openIM123
    api:
      # Listening IP; 0.0.0.0 means both internal and external IPs are listened to, default is recommended
      listenIP: 0.0.0.0
      # Listening ports; if multiple are configured, multiple instances will be launched, must be consistent with the number of prometheus.ports
      ports: [ 10302 ]
    prometheus:
      # Whether to enable prometheus
      enable: true
      # Prometheus listening ports, must match the number of api.ports
      ports: [ 12302 ]
      # This address can be accessed via a browser
      grafanaURL: http://127.0.0.1:13000/
  openim-rpc-user.yml: |
    rpc:
      # API or other RPCs can access this RPC through this IP; if left blank, the internal network IP is obtained by default
      registerIP: ''
      # Listening IP; 0.0.0.0 means both internal and external IPs are listened to, if blank, the internal network IP is automatically obtained by default
      listenIP: 0.0.0.0
      # Listening ports; if multiple are configured, multiple instances will be launched, and must be consistent with the number of prometheus.ports
      ports: [ 10320 ]
    prometheus:
      # Whether to enable prometheus
      enable: true
      # Prometheus listening ports, must be consistent with the number of rpc.ports
      ports: [ 12320 ]
  openim-crontask.yml: |
    cronExecuteTime: 0 2 * * *
    retainChatRecords: 365
    fileExpireTime: 90
  openim-msggateway.yml: |
    rpc:
      # The IP address where this RPC service registers itself; if left blank, it defaults to the internal network IP
      registerIP:
      # List of ports that the RPC service listens on; configuring multiple ports will launch multiple instances. These must match the number of configured prometheus ports
      ports: [ 10140, 10141, 10142, 10143, 10144, 10145, 10146, 10147, 10148, 10149, 10150, 10151, 10152, 10153, 10154, 10155 ]

    prometheus:
      # Enable or disable Prometheus monitoring
      enable: true
      # List of ports that Prometheus listens on; these must match the number of rpc.ports to ensure correct monitoring setup
      ports: [ 12140, 12141, 12142, 12143, 12144, 12145, 12146, 12147, 12148, 12149, 12150, 12151, 12152, 12153, 12154, 12155 ]

    # IP address that the RPC/WebSocket service listens on; setting to 0.0.0.0 listens on both internal and external IPs. If left blank, it automatically uses the internal network IP
    listenIP: 0.0.0.0

    longConnSvr:
      # WebSocket listening ports, must match the number of rpc.ports
      ports: [ 10001 ]
      # Maximum number of WebSocket connections
      websocketMaxConnNum: 100000
      # Maximum length of the entire WebSocket message packet
      websocketMaxMsgLen: 4096
      # WebSocket connection handshake timeout in seconds
      websocketTimeout: 10

  openim-msgtransfer.yml: |
    prometheus:
      # Enable or disable Prometheus monitoring
      enable: true
      # List of ports that Prometheus listens on; each port corresponds to an instance of monitoring. Ensure these are managed accordingly
      # Because four instances have been launched, four ports need to be specified
      ports: [ 12020, 12021, 12022, 12023, 12024, 12025, 12026, 12027, 12028, 12029, 12030, 12031, 12032, 12033, 12034, 12035 ]
  openim-push.yml: |
    rpc:
      # The IP address where this RPC service registers itself; if left blank, it defaults to the internal network IP
      registerIP:
      # IP address that the RPC service listens on; setting to 0.0.0.0 listens on both internal and external IPs. If left blank, it automatically uses the internal network IP
      listenIP: 0.0.0.0
      # List of ports that the RPC service listens on; configuring multiple ports will launch multiple instances. These must match the number of configured prometheus ports
      ports: [ 10170, 10171, 10172, 10173, 10174, 10175, 10176, 10177, 10178, 10179, 10180, 10181, 10182, 10183, 10184, 10185 ]

    prometheus:
      # Enable or disable Prometheus monitoring
      enable: true
      # List of ports that Prometheus listens on; these must match the number of rpc.ports to ensure correct monitoring setup
      ports: [ 12170, 12171, 12172, 12173, 12174, 12175, 12176, 12177, 12178, 12179, 12180, 12182, 12183, 12184, 12185, 12186 ]

    maxConcurrentWorkers: 3
    #Use geTui for offline push notifications, or choose fcm or jpns; corresponding configuration settings must be specified.
    enable: geTui
    geTui:
      pushUrl: https://restapi.getui.com/v2/$appId
      masterSecret:
      appKey:
      intent:
      channelID:
      channelName:
    fcm:
      # Prioritize using file paths. If the file path is empty, use URL
      filePath:   # File path is concatenated with the parameters passed in through - c(`mage` default pass in `config/`) and filePath.
      authURL:   #  Must start with https or http.
    jpns:
      appKey:
      masterSecret:
      pushURL:
      pushIntent:

    # iOS system push sound and badge count
    iosPush:
          pushSound: xxx
          badgeCount: true
          production: false

    fullUserCache: true

  openim-rpc-auth.yml: |
    rpc:
      # The IP address where this RPC service registers itself; if left blank, it defaults to the internal network IP
      registerIP:
      # IP address that the RPC service listens on; setting to 0.0.0.0 listens on both internal and external IPs. If left blank, it automatically uses the internal network IP
      listenIP: 0.0.0.0
      # List of ports that the RPC service listens on; configuring multiple ports will launch multiple instances. These must match the number of configured prometheus ports
      ports: [10200]
    prometheus:
      # Enable or disable Prometheus monitoring
      enable: true
      # List of ports that Prometheus listens on; these must match the number of rpc.ports to ensure correct monitoring setup
      ports: [12200]
    tokenPolicy:
      # Token validity period, in days
      expire: 90

  openim-rpc-conversation.yml: |
    rpc:
      # The IP address where this RPC service registers itself; if left blank, it defaults to the internal network IP
      registerIP:
      # IP address that the RPC service listens on; setting to 0.0.0.0 listens on both internal and external IPs. If left blank, it automatically uses the internal network IP
      listenIP: 0.0.0.0
      # List of ports that the RPC service listens on; configuring multiple ports will launch multiple instances. These must match the number of configured prometheus ports
      ports: [ 10220 ]

    prometheus:
      # Enable or disable Prometheus monitoring
      enable: true
      # List of ports that Prometheus listens on; these must match the number of rpc.ports to ensure correct monitoring setup
      ports: [ 12220 ]

  openim-rpc-friend.yml: |
    rpc:
      # The IP address where this RPC service registers itself; if left blank, it defaults to the internal network IP
      registerIP:
      # IP address that the RPC service listens on; setting to 0.0.0.0 listens on both internal and external IPs. If left blank, it automatically uses the internal network IP
      listenIP: 0.0.0.0
      # List of ports that the RPC service listens on; configuring multiple ports will launch multiple instances. These must match the number of configured prometheus ports
      ports: [ 10240 ]

    prometheus:
      # Enable or disable Prometheus monitoring
      enable: true
      # List of ports that Prometheus listens on; these must match the number of rpc.ports to ensure correct monitoring setup
      ports: [ 12240 ]

  openim-rpc-group.yml: |
    rpc:
      # The IP address where this RPC service registers itself; if left blank, it defaults to the internal network IP
      registerIP:
      # IP address that the RPC service listens on; setting to 0.0.0.0 listens on both internal and external IPs. If left blank, it automatically uses the internal network IP
      listenIP: 0.0.0.0
      # List of ports that the RPC service listens on; configuring multiple ports will launch multiple instances. These must match the number of configured prometheus ports
      ports: [ 10260 ]

    prometheus:
      # Enable or disable Prometheus monitoring
      enable: true
      # List of ports that Prometheus listens on; these must match the number of rpc.ports to ensure correct monitoring setup
      ports: [ 12260 ]

    enableHistoryForNewMembers: true

  openim-rpc-msg.yml: |
    rpc:
      # The IP address where this RPC service registers itself; if left blank, it defaults to the internal network IP
      registerIP:
      # IP address that the RPC service listens on; setting to 0.0.0.0 listens on both internal and external IPs. If left blank, it automatically uses the internal network IP
      listenIP: 0.0.0.0
      # List of ports that the RPC service listens on; configuring multiple ports will launch multiple instances. These must match the number of configured prometheus ports
      ports: [ 10280 ]

    prometheus:
      # Enable or disable Prometheus monitoring
      enable: true
      # List of ports that Prometheus listens on; these must match the number of rpc.ports to ensure correct monitoring setup
      ports: [ 12280 ]


    # Does sending messages require friend verification
    friendVerify: false

  openim-rpc-third.yml: |
    rpc:
      # The IP address where this RPC service registers itself; if left blank, it defaults to the internal network IP
      registerIP:
      # IP address that the RPC service listens on; setting to 0.0.0.0 listens on both internal and external IPs. If left blank, it automatically uses the internal network IP
      listenIP: 0.0.0.0
      # List of ports that the RPC service listens on; configuring multiple ports will launch multiple instances. These must match the number of configured prometheus ports
      ports: [ 10300 ]

    prometheus:
      # Enable or disable Prometheus monitoring
      enable: true
      # List of ports that Prometheus listens on; these must match the number of rpc.ports to ensure correct monitoring setup
      ports: [ 12300 ]


    object:
      # Use MinIO as object storage, or set to "cos", "oss", "kodo", "aws", while also configuring the corresponding settings
      enable: minio
      cos:
        bucketURL: https://temp-1252357374.cos.ap-chengdu.myqcloud.com
        secretID:
        secretKey:
        sessionToken:
        publicRead: false
      oss:
        endpoint: https://oss-cn-chengdu.aliyuncs.com
        bucket: demo-9999999
        bucketURL: https://demo-9999999.oss-cn-chengdu.aliyuncs.com
        accessKeyID:
        accessKeySecret:
        sessionToken:
        publicRead: false
      kodo:
        endpoint: http://s3.cn-south-1.qiniucs.com
        bucket: kodo-bucket-test
        bucketURL: http://kodo-bucket-test-oetobfb.qiniudns.com
        accessKeyID:
        accessKeySecret:
        sessionToken:
        publicRead: false

  share.yml: |
    secret: openIM123
    rpcRegisterName:
      user: user-rpc-service:10320
      friend: friend-rpc-service
      msg: msg-rpc-service
      push: openim-push-service
      messageGateway: openim-msggateway-service
      group: group-rpc-service
      auth: auth-rpc-service
      conversation: conversation-rpc-service
      third: third-rpc-service

  kafka.yml: |
    username: ''
    password: ''
    producerAck: all
    compressType: none
    address: [ "kafka-service:19094" ]
    toRedisTopic: toRedis
    toMongoTopic: toMongo
    toPushTopic: toPush
    toOfflinePushTopic: toOfflinePush
    toRedisGroupID: redis
    toMongoGroupID: mongo
    toPushGroupID: push
    toOfflinePushGroupID: offlinePush
    tls:
      enableTLS: false
      caCrt:
      clientCrt:
      clientKey:
      clientKeyPwd:
      insecureSkipVerify: false
  redis.yml: |
    address: [ "redis-service:16379" ]
    username:
    password: openIM123
    clusterMode: false
    db: 0
    maxRetry: 10
    poolSize: 100
  minio.yaml: |
    # Name of the bucket in MinIO
    bucket: openim
    # Access key ID for MinIO authentication
    accessKeyID: ${MINIO_ACCESS_KEY}
    # Secret access key for MinIO authentication
    secretAccessKey: ${MINIO_SECRET_KEY}
    # Session token for MinIO authentication (optional)
    sessionToken: ""
    # Internal address of the MinIO server
    internalAddress: localhost:10005
    # External address of the MinIO server, accessible from outside. Supports both HTTP and HTTPS using a domain name
    externalAddress: http://external_ip:10005
    # Flag to enable or disable public read access to the bucket
    publicRead: "false"
  mongo-init.sh: |
    echo "before running mongosh..."
    mongosh <<EOF
    var maxRetries = 300;
    var connected = false;
    var rootUsername = '$MONGO_INITDB_ROOT_USERNAME';
    var rootPassword = '$MONGO_INITDB_ROOT_PASSWORD';
    var dbName = '$MONGO_INITDB_DATABASE';
    var openimUsername = '$MONGO_OPENIM_USERNAME';
    var openimPassword = '$MONGO_OPENIM_PASSWORD';

    print('Starting MongoDB connection script...');
    print('Root username: ' + rootUsername);
    print('Target database: ' + dbName);
    print('OpenIM user to create: ' + openimUsername);

    while (!connected && maxRetries > 0) {
        try {
            print('Attempting to connect to MongoDB. Remaining retries: ' + maxRetries);
            db = connect('mongodb://127.0.0.1:27017/admin');
            var authResult = db.auth(rootUsername, rootPassword);
            if (authResult) {
                print('Authentication successful for root user: ' + rootUsername);
                connected = true;
            } else {
                print('Authentication failed for root user: ' + rootUsername + ' with password: ' + rootPassword);
                quit(1);
            }
        } catch (e) {
            maxRetries--;
            print('Connection failed due to error: ' + e);
            print('Retrying... Remaining attempts: ' + maxRetries);
            sleep(1000); // Sleep for 1 second
        }
    }

    if (connected) {
        print('Connected to MongoDB successfully. Proceeding to create user...');
        db = db.getSiblingDB(dbName);
        var createUserResult = db.createUser({
            user: openimUsername,
            pwd: openimPassword,
            roles: [{
                role: 'readWrite',
                db: dbName
            }]
        });

        if (createUserResult.ok == 1) {
            print('User creation successful. User: ' + openimUsername + ', Database: ' + dbName);
        } else {
            print('User creation failed for user: ' + openimUsername + ' in database: ' + dbName);
            quit(1);
        }
    } else {
        print('Failed to connect to MongoDB after 300 retries.');
        quit(1);
    }

    print('Script execution completed.');
    EOF
    echo "mongosh completed..."
  create-topic.sh: |
    #!/usr/bin/env bash
    # Wait for Kafka to be ready

    KAFKA_SERVER=localhost:9092

    MAX_ATTEMPTS=300
    attempt_num=1

    echo "Waiting for Kafka to be ready..."

    until /opt/bitnami/kafka/bin/kafka-topics.sh --list --bootstrap-server $KAFKA_SERVER; do
      echo "Attempt $attempt_num of $MAX_ATTEMPTS: Kafka not ready yet..."
      if [ $attempt_num -eq $MAX_ATTEMPTS ]; then
        echo "Kafka not ready after $MAX_ATTEMPTS attempts, exiting"
        exit 1
      fi
      attempt_num=$((attempt_num+1))
      sleep 1
    done

    echo "Kafka is ready. Creating topics..."


    topics=("toRedis" "toMongo" "toPush" "toOfflinePush")
    partitions=8
    replicationFactor=1

    for topic in "${topics[@]}"; do
      if /opt/bitnami/kafka/bin/kafka-topics.sh --create \
        --bootstrap-server $KAFKA_SERVER \
        --replication-factor $replicationFactor \
        --partitions $partitions \
        --topic $topic
      then
        echo "Topic $topic created."
      else
        echo "Failed to create topic $topic."
      fi
    done

    echo "All topics created."
---
apiVersion: v1
kind: Secret
metadata:
  name: mongo-secret
type: Opaque
data:
  mongo_initdb_root_username: cm9vdA== # base64 for "root"
  mongo_initdb_root_password: b3BlbklNMTIz # base64 for "openIM123"
  mongo_initdb_database: b3BlbmltX3Yz # base64 for "openim_v3"
  mongo_openim_username: b3BlbklN # base64 for "openIM"
  mongo_openim_password: b3BlbklNMTIz # base64 for "openIM123"
